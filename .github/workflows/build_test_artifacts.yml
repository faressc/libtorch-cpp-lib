name: Libtorch C++ Library Build

on:
    workflow_dispatch: # lets you run a build from github.com
    # Runs the workflow on push events but only for the develop branch
    push:
        branches:
            - main
        # This is needed otherwise the github.ref is not set with ref/tags/v...
        tags:
            - 'v*.*.*'

# When pushing new commits, cancel any running builds on that branch
concurrency:
    group: ${{ github.ref }}
    cancel-in-progress: true

env:
    LIBRARY_NAME: libtorch-2.4.1
    # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
    BUILD_TYPE: Release
    # Use up to 4 cpus to build juceaide, etc
    CMAKE_BUILD_PARALLEL_LEVEL: 4 
    # Name of the build directory
    BUILD_DIR: libtorch_build

jobs:

    cmake-build:
        name: ${{ matrix.name }}
        strategy:
            fail-fast: false # show all errors for each platform (vs. cancel jobs on error)
            matrix:
                include:
                    -   os: macOS-latest
                        name: macOS-x86_64
                    -   os: macOS-latest
                        name: macOS-arm64
                    -   os: windows-latest
                        name: Windows-x86_64
                    -   name: Linux-x86_64
                        os: ubuntu-latest

        runs-on: ${{ matrix.os }}
        steps:

            # A simple printout of the matrix
            -   name: printout
                shell: bash
                run: |
                    echo ${{ github.ref }}
                    echo "matrix.name=${{ matrix.name }}";
                    echo "matrix.os=${{ matrix.os }}";

            # We need the osxutils to get the codesign and notorization tools
            # We need to install ccache here for Windows-x86_64 to grab the right version
            -   name: install deps
                shell: bash
                run: |
                    if [ "${{ matrix.name }}" == "Linux-x86_64" ]; then
                            sudo apt-get update && sudo apt install ninja-build
                    elif [ "${{ matrix.name }}" == "macOS-x86_64" ]; then
                            brew install osxutils ninja
                            echo "brew prefix: $(brew --prefix)"
                    elif [ "${{ matrix.name }}" == "macOS-arm64" ]; then
                            brew install osxutils ninja
                            echo "brew prefix: $(brew --prefix)"
                    elif [ "${{ matrix.name }}" == "Windows-x86_64" ]; then
                            choco install ninja
                    else
                            echo "Unknown OS";
                    fi;

            # With this we checkout to our repo
            -   name: get repo and submodules
                uses: actions/checkout@v4
                with:
                    submodules: true

            # We cache the build to speed up the build process
            -   name: cache the build
                uses: mozilla-actions/sccache-action@v0.0.5

            -   name: setup python
                uses: actions/setup-python@v4
                with:
                    python-version: '3.10' 
                    cache: 'pip' # caching pip dependencies

            # Install the dependencies
            -   name: install python deps
                shell: bash
                run: |
                    pip install --upgrade pip
                    pip install pyyaml pybind11 typing-extensions
                    if [ "${{ matrix.name }}" == "Windows-x86_64" ]; then
                        pip install numpy
                    fi;

            -   name: initialize all submodules
                shell: bash
                run: git submodule update --init --recursive

            # Typical cmake configuration with default generator
            -   name: cmake configure
                shell: bash
                run: |
                    mkdir ${{ env.BUILD_DIR }}
                    cd ${{ env.BUILD_DIR }}
                    if [ "${{ matrix.name }}" == "macOS-x86_64" ]; then
                        cmake -DBUILD_SHARED_LIBS:BOOL=ON -DCMAKE_BUILD_TYPE:STRING=Release -DPYTHON_EXECUTABLE:PATH=`which python3` -DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DCMAKE_INSTALL_PREFIX:PATH=../pytorch-install ../pytorch
                    elif [ "${{ matrix.name }}" == "macOS-arm64" ]; then
                        cmake -DBUILD_SHARED_LIBS:BOOL=ON -DCMAKE_BUILD_TYPE:STRING=Release -DPYTHON_EXECUTABLE:PATH=`which python3` -DCMAKE_OSX_ARCHITECTURES=arm64 -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DCMAKE_INSTALL_PREFIX:PATH=../pytorch-install ../pytorch
                    else
                        cmake -DBUILD_SHARED_LIBS:BOOL=ON -DCMAKE_BUILD_TYPE:STRING=Release -DPYTHON_EXECUTABLE:PATH=`which python3` -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DCMAKE_INSTALL_PREFIX:PATH=../pytorch-install ../pytorch
                    fi;

            # Build the project
            -   name: cmake build
                shell: bash
                run: |
                    cd ${{ env.BUILD_DIR }}
                    cmake --build . --target install --parallel ${{ env.CMAKE_BUILD_PARALLEL_LEVEL }}

            # Declaring the product name and the packaging directory
            -   name: declare artefact variables
                shell: bash
                run: |
                    echo "PACKAGE_DIR=${{ env.LIBRARY_NAME }}-${{ matrix.name}}" >> $GITHUB_ENV
                    echo "PRODUCT_NAME=${{ env.LIBRARY_NAME }}-${{ matrix.name }}" >> $GITHUB_ENV

            # Moving the artefacts to a packaging directory
            -   name: move artefacts
                shell: bash
                run: |
                    mkdir -p ${{ env.PACKAGE_DIR }}
                    mkdir -p ${{ env.PACKAGE_DIR }}/include
                    mkdir -p ${{ env.PACKAGE_DIR }}/lib
                    mkdir -p ${{ env.PACKAGE_DIR }}/bin
                    mkdir -p ${{ env.PACKAGE_DIR }}/share

                    mv pytorch-install/lib/* ${{ env.PACKAGE_DIR }}/lib
                    mv pytorch-install/bin/* ${{ env.PACKAGE_DIR }}/bin
                    mv pytorch-install/include/* ${{ env.PACKAGE_DIR }}/include
                    mv pytorch-install/share/* ${{ env.PACKAGE_DIR }}/share

            # We need to import the apple developer certificate so that we can codesign our binaries
            -   name: import certificates (macOS)
                uses: apple-actions/import-codesign-certs@v3
                if: ${{ matrix.os == 'macOS-latest' }}
                with:
                    # GitHub encrypted secrets
                    p12-file-base64: ${{ secrets.DEV_ID_APP_CERT }}
                    p12-password: ${{ secrets.DEV_ID_APP_PWD }}

            # Codesigning all the binaries
            -   name: codesign (macOS)
                if: ${{ matrix.os == 'macOS-latest' }}
                run: |
                    codesign --force -s "${{ secrets.DEV_ID_APP }}" -v ${{ env.PACKAGE_DIR }}/lib/*.dylib --deep --strict --options=runtime --timestamp;
                    # Here we check the code signitures
                    codesign -dv --verbose=4 ${{ env.PACKAGE_DIR }}/lib/*.dylib;

            # Zip the artefact
            -   name: zip artefacts
                shell: bash
                run: |
                    if [ "${{ matrix.os }}" == "macOS-latest" ]; then
                        zip -vr ${{ env.PRODUCT_NAME }}.zip ${{ env.PRODUCT_NAME }}/ -x "*.DS_Store"
                    elif [ "${{ matrix.name }}" == "Windows-x86_64" ]; then
                        tar -a -c -f ${{ env.PRODUCT_NAME }}.zip ${{ env.PRODUCT_NAME }}/
                    elif [ "${{ matrix.name }}" == "Linux-x86_64" ]; then
                        zip -r ${{ env.PRODUCT_NAME }}.zip ${{ env.PRODUCT_NAME }}/
                    else
                        echo "Unknown OS";
                    fi;

            -   name: upload artifact
                uses: actions/upload-artifact@v4
                with:
                    name: ${{ env.PRODUCT_NAME }}.zip
                    path: ${{ env.PACKAGE_DIR }}.zip

    release:
        if: startsWith(github.ref, 'refs/tags/')
        runs-on: ubuntu-latest
        needs: cmake-build

        steps:
        -   name: Get Artifacts
            uses: actions/download-artifact@v4

        -   name: Create Release
            uses: softprops/action-gh-release@v2
            with:
                prerelease: true
                files: |
                    */*.zip